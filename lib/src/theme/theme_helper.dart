import 'dart:ui';
import 'package:flutter/material.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              8,
            ),
          ),
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: const Color(0XFFFFFFFF),
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: colorScheme.onError,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              3,
            ),
          ),
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateProperty.all<Color>(appTheme.greenA700),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      textTheme: TextTheme(
        headlineLarge: TextStyle(
          color: colorScheme.onError,
          fontSize: 33,
          fontFamily: 'Mark Pro',
          fontWeight: FontWeight.w700,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray900Cc,
          fontSize: 13,
          fontFamily: 'Mark Pro',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray800,
          fontSize: 10,
          fontFamily: 'Mark Pro',
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 10,
          fontFamily: 'Mark Pro',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 16,
          fontFamily: 'Mark Pro',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.blueGray900,
          fontSize: 14,
          fontFamily: 'Mark Pro',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20,
          fontFamily: 'Mark Pro',
          fontWeight: FontWeight.w500,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24,
          fontFamily: 'Mark Pro',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onPrimaryContainer.withOpacity(1),
          fontSize: 12,
          fontFamily: 'Mark Pro',
          fontWeight: FontWeight.w500,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    onPrimary: Color(0XFF0E0E0E),
    shadow: Color(0XFF0E0E0E),
    onPrimaryContainer: Color(0X7FB1B0B0),
    onTertiary: Color(0X7FB1B0B0),
    scrim: Color(0XFF58028C),
    primaryContainer: Color(0XFF58028C),
    tertiaryContainer: Color(0XFF009A49),
    secondaryContainer: Color(0XFF009A49),
    error: Color(0XFF0E0E0E),
    onErrorContainer: Color(0XFFFFFFFF),
    outline: Color(0XFF0E0E0E),
    onSurfaceVariant: Color(0XFF0E0E0E),
    onBackground: Color(0X7FB1B0B0),
    outlineVariant: Color(0XFF58028C),
    errorContainer: Color(0XFFF30909),
    onSurface: Color(0X7FB1B0B0),
    onError: Color(0XFF217AC0),
    surface: Color(0XFF58028C),
    onInverseSurface: Color(0XFF217AC0),
    onSecondaryContainer: Color(0XFF0E0E0E),
    tertiary: Color(0XFF58028C),
    surfaceTint: Color(0XFF0E0E0E),
    onTertiaryContainer: Color(0XFF0E0E0E),
    surfaceVariant: Color(0XFF009A49),
    inversePrimary: Color(0XFF58028C),
    secondary: Color(0XFF58028C),
    inverseSurface: Color(0XFF0E0E0E),
    background: Color(0XFF58028C),
    onSecondary: Color(0X7FB1B0B0),
    primary: Color(0XFF0184D6),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  Color get primaryVariant => const Color(0XFF58028C);
  Color get secondaryVariant => const Color(0XFF009A49);
  Color get gray900 => const Color(0XFF121826);
  Color get orange100 => const Color(0XFFFFE4BD);
  Color get greenA700 => const Color(0XFF05D226);
  Color get greenA70001 => const Color(0XFF12B76A);
  Color get gray400 => const Color(0XFFC4C4C4);
  Color get deepOrange300 => const Color(0XFFFF7561);
  Color get deepOrange50 => const Color(0XFFFFE2DE);
  Color get gray50 => const Color(0XFFF3F9FF);
  Color get lightBlue800 => const Color(0XFF0769B9);
  Color get green50 => const Color(0XFFE9FFF0);
  Color get gray700 => const Color(0XFF646464);
  Color get gray5001 => const Color(0XFFF4F9FF);
  Color get gray70001 => const Color(0XFF666666);
  Color get gray100 => const Color(0XFFFCF4F0);
  Color get yellow800 => const Color(0XFFF7A325);
  Color get blue100 => const Color(0XFFBFE2FF);
  Color get gray5002 => const Color(0XFFF8F8F8);
  Color get gray600 => const Color(0XFF818181);
  Color get gray10001 => const Color(0XFFF4F1F6);
  Color get gray10002 => const Color(0XFFF4F4F6);
  Color get blueGray400 => const Color(0XFF888888);
  Color get lime200 => const Color(0XFFD6FFAD);
  Color get greenA100 => const Color(0XFF9DFFCB);
  Color get whiteA700 => const Color(0XFFFDFDFF);
  Color get gray800 => const Color(0XFF4E4E4E);
  Color get lightGreenA700 => const Color(0XFF59B200);
  Color get gray300 => const Color(0XFFDDDDDD);
  Color get gray5003 => const Color(0XFFF3FAFF);
  Color get blueGray900 => const Color(0XFF373737);
  Color get blueGray50 => const Color(0XFFE9EBEE);
  Color get blue50 => const Color(0XFFE8F4FF);
  Color get gray900Cc => const Color(0XCC242525);
  Color get blue300 => const Color(0XFF6EB8FF);
  Color get blueGray100 => const Color(0XFFD1D1D1);
  Color get blue5001 => const Color(0XFFECF1FF);
  Color get black900 => const Color(0XFF000000);
  Color get gray30001 => const Color(0XFFDADADA);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
